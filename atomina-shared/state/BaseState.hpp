#pragma once

#include "pch.hpp"
#include "core/api.hpp"
#include "State.hpp"
#include "util/Log.hpp"
#include "GUI/WindowEvent.hpp"

namespace ATMA
{

    /**
     * Basic State that defines all functions of a state to be inherited
     * All states should extend this class
     */
    class BaseState
    {
    public:
        // default constructor
        BaseState();

        // move constructor
        BaseState(BaseState &&b) noexcept;

        // destructor
        virtual ~BaseState();

        /**
         * function called by context when activating state
         */
        virtual void activate();

        /**
         * function called by context when deactivating state
         */
        virtual void deactivate();

        /**
         * checks if state is active
         * @returns if the state is active or not
         */
        virtual bool isActive() const
        {
            return m_active;
        }

        /**
         * gives the type id of the state
         * each state should give a different type id
         * @returns type id of the state
         */
        virtual unsigned int getId() const
        {
            return StateType(State::Empty);
        }

        /**
         * passes window events to be handled by the state
         * @param l_winEvent the event generated by the window
         * @returns whether or not the event was handled
        */
        virtual void handleInput(const WindowEvent &l_winEvent) = 0;

        // equality operator
        bool operator==(const BaseState &b) const;

        // less than operator
        bool operator<(const BaseState &b) const;

        // greate than operator
        bool operator>(const BaseState &b) const;
    protected:
        bool m_active;
        bool m_transparent;
        bool m_transcendent;
        bool m_communicable;
    };

}
