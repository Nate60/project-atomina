#pragma once
#include "core/api.hpp"
#include "state/BaseState.hpp"

namespace ATMA
{
    /**
     * Dummy state used as a place holder
     */
    class ATMA_API DummyState: public BaseState
    {
    public:
        // default constructor
        DummyState();

        // deconstructor
        virtual ~DummyState();

        /**
         * stub function for activation of state
         */
        virtual void activate() override;

        /**
         * stub function for deactivation of state
         */
        virtual void deactivate() override;

        /**
         * gives type id of dummy state
         * @return type id of dummy state
         */
        virtual unsigned int getId() const override
        {
            return StateType(State::Dummy);
        }

        /**
         * passes window events to be handled by the state
         * @param l_winEvent the event generated by the window
         * @returns whether or not the event was handled
         */
        virtual void handleInput(const WindowEvent &l_winEvent) {}
    };
}