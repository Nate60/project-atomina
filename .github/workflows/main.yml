name: MSBuild

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .
  EXTERNAL_LIB_DIR: extlib
  API_PROJECT_PATH: ./atomina-dll/atomina-dll.vcxproj
  GAME_PROJECT_PATH: ./atomina-game/atomina-game.vcxproj
  TEST_PROJECT_PATH: ./atomina-test/atomina-test.vcxproj
  TEST_PROJECT_DIR: ./atomina-test

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release
  BUILD_PLATFORM: x64

jobs:
  build:
    runs-on: windows-2019

    steps:
    
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Checkout action repo branch
      uses: actions/checkout@v2
      with:
        fetch-depth: 2
        submodules: 'recursive'
    - run: git checkout HEAD    
            
    - name: Make Directory for External Libraries
      working-directory: ${{env.GITHUB_WORKSPACE}}
      shell: cmd
      run: mkdir extlib
          
    - name: CL.exe
      uses: ilammy/msvc-dev-cmd@v1
      
    - name: SFML CMAKE
      working-directory: ${{env.EXTERNAL_LIB_DIR}}
      run: |
        cmake -G"NMake Makefiles" ..\atomina-dll\vendor\sfml\
        nmake

    - name: Build DLL
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{env.BUILD_PLATFORM}} ${{env.API_PROJECT_PATH}}
      
    - name: Build Game
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{env.BUILD_PLATFORM}} ${{env.GAME_PROJECT_PATH}}
      
    - name: Build Test Project
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{env.BUILD_PLATFORM}} ${{env.TEST_PROJECT_PATH_PATH}}
      
    - name: Setup VSTest path
      uses: darenm/Setup-VSTest@v1
      
    - name: Run Test Project
      run: vstest.console.exe /Platform:${{env.BUILD_PLATFORM}} ${{env.TEST_PROJECT_DIR}}\${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}\atomina-test.dll
      
