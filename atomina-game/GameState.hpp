#pragma once
#include <atomina.hpp>

using namespace std::placeholders;
using namespace std::string_literals;

/**
 * Game Implementation of state to implement a user defined extended state
 * that is external to the engine
 */
class GameState: public ATMA::BaseState
{
public:
    ATMA::ATMAContext &ctx = ATMA::ATMAContext::getContext();

    // default constructor
    GameState(): BaseState() {}

    /**
     * Game app implementation of onCreate function to be the initialization
     * of the game app user defined objects
     */
    virtual void onCreate() override {}

    /**
     * stub implementation of onDestroy
     */
    virtual void onDestroy() override {}

    /**
     * stub implementation of activate function
     */
    virtual void activate() override {}

    /**
     * stub implementation of deactive function
     */
    virtual void deactivate() override {}

    /**
     * gets state id
     * @returns state id
     */
    virtual unsigned int getId() const override
    {
        return ATMA::StateType(ATMA::State::COUNT);
    }

    /**
     * passes window events to be handled by the state
     * @param l_winEvent the event generated by the window
     * @returns whether or not the event was handled
     */
    virtual void handleInput(const ATMA::WindowEvent &l_winEvent)
    {
        switch(l_winEvent.m_type)
        {
        case ATMA::WindowEventEnum::KeyDowned:
            {
                if(m_selected == 1)
                {
                    m_selected = 0;
                }
                else
                {
                    m_selected++;
                }
                break;
            }
        case ATMA::WindowEventEnum::Resized:
            ATMA::ATMAContext::getContext().m_renderCtx->setSize(
                {l_winEvent.getProp<unsigned int>("width"s),
                 l_winEvent.getProp<unsigned int>("height"s)}
            );
            break;
        case ATMA::WindowEventEnum::Closed:
            l_winEvent.m_win->notifyClose();
            break;
        }
        return;
    }
private:
    unsigned int m_menuOpts[2] = {0, 0};
    int m_selected = 0;
};
